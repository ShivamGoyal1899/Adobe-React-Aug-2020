Day-1
Applications for the browser

    Presentation
        HTML, CSS

    Data

    User Interaction
        JavaScript


zen coding

visual studio code
chrome browser
node.js (LTS version 12.x)

window (BOM -> Browser Object Model)
    navigator
    history
    frames
    document (DOM - Document Object Model)


function greetUser(){
    var div = body.children[4]
    var t = document.getElementById('txtUserName')
    var userName = t.value
    var greetMessage = 'Hi ' + userName + ', Have a nice day!'
    div.innerText = greetMessage
}

JavaScript
    Data Types
        number, string, boolean, object, function, undefined

    Programming Constructs
        var, if else, switch case, for, while, try catch finally, throw, function, typeof

    APIs
        Date, Array,  Math, timer (setTimeout, clearTimeout, setInterval, clearInterval), Error, RegEx

    Unique
        Object
            object is a dictionary (hash)
            is a collection of key/value pairs
            key can be a string or a number
            one key value pair is called as an attribute
            attributes can be accessed using the dot (.) notation or square brackets ([]) notation
            classes are not needed to create objects
            objects are dynamic
            a method in an object is just an attribute whose value is a function
            use the 'for..in' construct to iterate over all the attributes in an object

        Function
            Function can be treaded like objects
                functions can be created using the 'expression / literal' syntax
                functions can have attributes
                functions can have methods
                
                Higher Order Functions
                    functions can be passed as arguments to other functions
                    functions can be returned as return value from other functions
            
            implicit values -> this, arguments (array like object with all the values passed to the function as arguments)
            apply, bind & call are the built-in methods for functions

        Invocation Context (this)
            this
                - NOT based on WHERE the function is OR who owns the function
                - IS based on HOW the function is invoked


        Function Invocation Patterns
            If a function is invoked as a method of an object
                this -> object

            If a function is invoked as a function
                this -> global (window)

            Using the 'call' method of a function

            Using the 'apply' method of a function

            As a "Immediately Invoked Function Expression"

            Using 'new' keyword


Memoization
pure functions
    if the function execution can be replace with the result of the execution
    In other words , the function should not have any side effects


Constructor Functions
    Functions used like a 'class'
        invoked using the 'new' keyword
            - this -> new object
            - 'this' is returned by default

        As a convention, the constructor functions are named with a proper case


Inheritance
    Prototypal Inheritance


ES6 (ESNext / ES2015 / Ecmascript6 )
1. let
2. const
3. Array destructuring
4. Rest operator (array)
5. Spread operator (Array)
6. Object destructuring
7. Rest operator (Object)
8. Spread operator (Object)
9. default arguments
10. arrow functions
11. template strings
12. class

http://es6-features.org


var products = [
    {id : 7, name : 'Pen', cost : 40, units : 30, category : 'stationary'},
    {id : 2, name : 'Ten', cost : 70, units : 20, category : 'grocery'},
    {id : 9, name : 'Den', cost : 20, units : 40, category : 'stationary'},
    {id : 4, name : 'Len', cost : 60, units : 50, category : 'stationary'},
    {id : 5, name : 'Zen', cost : 50, units : 30, category : 'grocery'}
]

Solve the following without using any looping constructs
(Hint : use filter, reduce, forEach and map methods of the array)

1. find all stationary products
2. create a new list of products with all existing the attributes and a new attribute called 'value' (where value = cost * units )
3. print the 'name' and 'value' of each product in the console
4. find the maximum cost from the products list

Solution
1. 
var staionaryProducts = products.filter(p => p.category === 'stationary')

2.
var newProducts = products.map(p => ({...p, value : p.cost * p.units}))

3.
products
    .map(p => ({...p, value : p.cost * p.units}))
    .forEach(p => console.log(p.name, p.value))

4.
var maxCost = products.reduce((result, product) => result > product.cost ? result : product.cost, 0)

jQuery
=======
    JS library 
    DOM manipulation

    jQuery()


Node.js
JS Runtime Environment
    - execute any javascript programs

Single Threaded Event Loop
CommonJS modules

package.json
    manifest containing all the metadata information about the application

npm
    node package manager

npm init
npm start

netstat -vanp tcp | grep 8080
OR
sudo lsof -i tcp:8080

And
kill <process id>

yarn
to install yarn
npm install yarn -g


Route
    url

RESTFul services
    Web Standards for data

Resource
    url
        GET     http://myapp.com/users
        GET     http://myapp.com/users/<user-id>
        POST    http://myapp.com/users/
        PUT     http://myapp.com/users/<user-id>
        DELETE  http://myapp.com/users/<user-id>

        200 OK
        201 Object Created
        304 Object Moved
        403 Unauthorized
        404 Not Found
        500 Internal Server Error


    Presentation + UI Behavior + Data (State)

    Application = composition of components
    Component = One UI entity
              = encapsulation of Presentation + UI Behavior + State
              = synchronization of state and UI is automatically taken care

    Efficient Rendering of the UI
    
    HTML
        Open tags alone are supported
        "class" attribute is allowed
        "for" attribute is allowed
    JSX
        Every open tag must have a corresponding close tag
        Use "className" in place of "class"
        Use "htmlFor" in place of "for"

Lifecycle Events
    Mounted
        componentWillMount
        componentDidMount
    Updated
        shouldComponentUpdate
        componentDidUpdate
    Unmounted
        componentWillUnmount


create-react-app

to create an application
    npx create-react-app <application-name>


React Hooks
    functions to handle side effects in function components
    hooks functions must start with 'use'
    Built in hooks
        useState
        useEffect
        useReducer
        useMemo
        

Store
    - getState()
    - subscribe(fn)
    - dispatch(action)

https://bit.ly/2G6xNq4



React
    Components (User Interaction)
        Needs the following
            a way to access the state from the store
            access to 'dispatch' so that actions can be dispatched

Redux
    State Management

React-Redux
    Provider
        All the components that requires redux infrastructure should be child components of the Provider

    useSelector
        can be used to gain access to the store state, so that the dat can be displayed to the user
    
    useDispatch
        can be used to gain access to the dispatch method so that the actions can be dispatched based on user interaction


Calculator using Redux
<div>
    <h3>Calculator</h3>
    <hr>
    <input type="number" name="" id="">
    <input type="number" name="" id="">
    <br>
    <input type="button" value="Add">
    <input type="button" value="Subtract">
    <input type="button" value="Multiply">
    <input type="button" value="Divide">
    <div>[Result]</div>
</div>